---
title: "GPSTracker"
format: html
editor: visual
---

# Project introduction

I experimented with snap-to-train based on the coding example from [the course website](https://computationalmovementanalysis.github.io/FS25/Appendix/Appendix.html#mapmatching-gps-points-to-the-road-network) 

![Snap-to-track results for train and tram](images/train_and_tram.png){#fig-train-and-tram}

I encountered the following issues that need resolving:
* Walking next to tracks: How to select Wollishofen - Wädenswil only?
* Multiple tracks (Thalwil area): How to select one track only?
* Train stops in station: How to exlude non-movement periods?

# Setup
## Load libraries
```{r}
library("readr")
library("ggplot2")
library("sf")
library("dplyr")
library("tmap")
library("jsonlite")
library("reticulate")
library("stringr")
library("gitcreds")
```

## Connect to Github
```{r}
#| eval: false
#| include: false
gitcreds_set()
gitcreds_get()
```

# Timeline
## Extract coordinates from timeline data
```{python}
import json
import csv

# List of keys that indicate location data
location_keys = ['point', 'latlng']

def find_location_data(data):
  locations = []
  if isinstance(data, dict):
    for key, value in data.items():
      if key.lower() in location_keys:
        locations.append(value)
      # Recursively call the function if the value is a dictionary or list
      if isinstance(value, (dict, list)):
        locations.extend(find_location_data(value))
  # If data is a list, iterate over each item
  elif isinstance(data, list):
    for item in data:
      locations.extend(find_location_data(item))
  return locations
  
with open('data/timeline.json', 'r') as file:
  records_json = file.read()

data = json.loads(records_json)
location_data = find_location_data(data['rawSignals'])

with open('data/timeline.csv', 'w') as file:
  file.write("Latitude,Longitude\n")
  for item in location_data:
    item = item.replace("°", "")
    file.write(item + "\n")
```

# Tracking data
## Read data
```{r}
df <- read_delim("data/gps2_20250308.csv")
tf <- read_delim("data/timeline.csv")
```

## EDA
```{r}
hist(df$Dilution)
```

## Combine data
```{r}
df_1 <- df |> filter(Dilution < 1) |> mutate(Source = "tracker-DOP<1")
df_2 <- df |> filter(Dilution >= 1 & Dilution < 2) |> mutate(Source = "tracker-DOP<2")
df_3 <- df |> filter(Dilution >= 2 & Dilution < 5) |> mutate(Source = "tracker-DOP<5")
df_4 <- df |> filter(Dilution >= 5 & Dilution < 10) |> mutate(Source = "tracker-DOP<10")
df_5 <- df |> filter(Dilution >= 10) |> mutate(Source = "tracker-DOP>10")
tf <- tf |> mutate(Source = "timeline")
tf <- tf |> mutate(Latitude = str_replace_all(Latitude, " ", ""))
tf <- tf |> mutate(Longitude = str_replace_all(Longitude, " ", ""))
tf <- tf |> mutate(Latitude = as.double(Latitude))
tf <- tf |> mutate(Longitude = as.double(Longitude))
df <- bind_rows(df_1, df_2, df_3, df_4, df_5)

counts <- df |> 
  group_by(Source) |> 
  summarise(n())
print(counts)
```

## Prepare data
```{r}
sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
sf <- st_transform(sf, 2056)
```

## Plot data
```{r}
ggplot(df, aes(Longitude, Latitude, color = Source)) +
  geom_point() +
  theme(legend.position = "none")
```

```{r}
mcp <- st_convex_hull(sf)
plot(mcp, max.plot = 22)
```

```{r}
ggplot(mcp, aes()) +
  geom_sf(alpha = 0.4)
```

```{r}
tmap_mode("view")
tmap_options(basemaps = "OpenStreetMap")
my_palette <- c("darkred", "orange", "lightblue", "lightgreen", "purple", "pink")
tm_shape(mcp) +
  tm_dots(col = "Source", palette = my_palette)
```

# Trains
## Read data
```{r}
tracks_gdb_path <- "data/schienennetz_2056_de.gdb/"
tracks_layers <- st_layers(tracks_gdb_path)
#Available layers:
#     layer_name              geometry_type features fields       crs_name
#1 Fehlerprofile                         NA       48      7           <NA>
#2   Netzsegment          Multi Line String     3424     16 CH1903+ / LV95
#3       KmLinie Measured Multi Line String      460      9 CH1903+ / LV95
#4    Netzknoten                      Point     3210     10 CH1903+ / LV95
tracks_segment <- read_sf(tracks_gdb_path, layer = "Netzsegment")
tracks_line <- read_sf(tracks_gdb_path, layer = "KmLinie")
tracks_nodes <- read_sf(tracks_gdb_path, layer = "Netzknoten")
```

## EDA
```{r}
ggplot() +
  geom_sf(data = tracks_line) +
  geom_sf(data = tracks_nodes)
```

## Snap GPS fixes to train track
```{r}
tracks_line <- st_union(st_zm(tracks_line))

# Select the GPS locations that are close to train tracks.
buffer_30m <- tracks_line |> st_buffer(30)
joined <- st_intersection(st_as_sfc(sf), buffer_30m)

# Get the nearest point for each GPS location. 
nearest <- st_nearest_points(joined, tracks_line)

# The output is a line for each point (see plot below)
# Now we need convert the output from LINE to POINT. 
# This doubles the number of features.
near_p <- st_cast(nearest, "POINT")

# Subset the points. Uneven numbers are the original points.
# Even numbers are the new, mapmatched points.
near_from <- near_p[c(TRUE, FALSE)]  # Original GPS fixes.
near_to <- near_p[c(FALSE,TRUE)]  # Nearest track line points.
```

## Visualize
```{r}
tmap_mode("view")
tmap_options(basemaps = "OpenStreetMap")
tm_shape(tracks_line) + tm_lines() +
  tm_shape(nearest) + tm_lines(lty = 3) +
  tm_shape(near_from) + tm_dots() +
  tm_shape(near_to) + tm_dots(col = "red")
```
