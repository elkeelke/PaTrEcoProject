---
title: "Foxes with Move2"
format: html
editor: visual
---

## Load libraries
```{r}
library("readr")
library("ggplot2")
library("sf")
library("dplyr")
library("tmap")
library("lubridate")
library("tidyr")
library("move2")
library("units")
library("rnaturalearth")
```

## Store movebank credentials (this is a one-off)
```{r}
movebank_store_credentials(
  "elke.michlmayr",
  "",
  key_name = getOption("move2_movebank_key_name"),
  force = FALSE
)
```

## Load movebank studies
```{r}
all_studies <- movebank_download_study_info()
cc_studies <- movebank_download_study_info(license_type = "CC_0")
```

## Load data for the red fox study
```{r}
fox_study <- cc_studies |>
  filter(name == "Red Fox (Vulpes vulpes) in UK wet grasslands")

movebank_download_study_info(study_id = 3179890710)$sensor_type_ids

data <- movebank_download_study(
  study_id = 3179890710,
  sensor_type_id = c("gps"),
  'license-md5'='ffa36f79defe10eac9fe70f6502a17e0'
)
```

## Get an overview which other fox data exists
```{r}
fox_studies <- cc_studies |>
  filter(grepl('vulpes|fox', name)) |>
  select(taxon_ids, name, number_of_individuals, study_objective, sensor_type_ids, 
         i_can_see_data, timestamp_first_deployed_location, timestamp_last_deployed_location)
print(fox_studies$taxon_ids)

# These are other foxes:
# 4x Vulpes lagopus (Arctic fox)
# Pteropus melanotus (Black-eared flying fox)
# Pteropus poliocephalus (Grey-headed flying fox)
# Pteropus lylei (Lyle's flying fox)

red_fox_studies <- cc_studies |>
  filter(taxon_ids == "Vulpes vulpes")
# There are 2 other red fox studies from Canada with 2 foxes each (Argos tracking)
```

## Data checks (likely not actually required)
```{r}
mt_is_track_id_cleaved(data)
mt_is_time_ordered(data)
mt_has_unique_location_time_records(data)
mt_has_no_empty_points(data)
```

## Plotting the fox trails
```{r}
ggplot() +
  geom_sf(
    data = mt_track_lines(data),
    aes(color = "all") # This column does not exist, aggregating all data
  ) +
  labs(
    color = "Fox trails",
    title = "Zoomed-in view of data location"
  )
```

```{r}
ggplot() +
  geom_sf(data = ne_coastline(returnclass = "sf", 50)) +
  theme_linedraw() +
  geom_sf(data = mt_track_lines(data), aes(color = "all")) +
  coord_sf(
    crs = sf::st_crs("+proj=aeqd +lon_0=0 +lat_0=50 +units=km"),
    xlim = c(-450, 250), ylim = c(-100, 600)
  ) +
  labs(
    color = "Fox trails",
    title = "High-level overview of data location"
  )
```

```{r}
ggplot() +
  geom_sf(data = mt_track_lines(data), aes(color = individual_local_identifier)) +
  labs(
    color = "Fox trails",
    title = "Individual fox trails per fox id"
  )
```

```{r}
ggplot() +
  geom_sf(data = ne_coastline(returnclass = "sf", 10)) +
  theme_linedraw() +
  geom_sf(data = mt_track_lines(data), aes(color = individual_local_identifier)) +
  coord_sf(
    crs = sf::st_crs("+proj=aeqd +lon_0=-1.5 +lat_0=50.75 +units=km"),
    xlim = c(-50, 50), ylim = c(-50, 50)
  ) +
  labs(
    color = "Fox trails",
    title = "Individual fox trails per fox id"
  )
```

```{r}
# TBD: This has a better background map but it's not immediately clear how to set the parameters
ggplot() +
  ggspatial::annotation_map_tile(zoom = 5) +
  ggspatial::annotation_scale() +
  theme_linedraw() +
  geom_sf(data = data, color = "darkgrey", size = 1) +
  geom_sf(data = mt_track_lines(data), aes(color = individual_local_identifier)) +
  coord_sf(
    crs = sf::st_crs("+proj=aeqd +lon_0=0 +lat_0=50 +units=km"),
    xlim = c(-450, 250),
    ylim = c(-100, 600)
  ) +
  guides(color = "none")
```

## Net displacement analysis

Visualize the distance to the first location of each trajectory:

```{r}
displacement_data <- data |>
  mutate(track_id = mt_track_id(data)) |>
  group_by(track_id) |>
    mutate(displacement = c(st_distance(
    !!!syms(attr(data, "sf_column")),
    (!!!syms(attr(data, "sf_column")))[row_number() == 1]
  )))

displacement_data |> ggplot() +
  geom_line(aes(
    x = timestamp,
    y = set_units(displacement, "km"),
    color = track_id
  )) +
  ylab("Distance from start") +
  theme_linedraw()
```

Doublecheck that we really have data for these timelines (2016 - 2019):
```{r}
counts_by_month_and_year <- data |>
  mutate(month_year = paste(as.character(year(timestamp)), as.character(month(timestamp)), sep = "-")) |>

st_drop_geometry(counts_by_month_and_year)
ggplot(counts_by_month_and_year, aes(x = factor(month_year, levels = sort(unique(month_year))))) +
  geom_bar() +
  labs(title = "Number of data points over time", x = "Month and Year", y = "Data point count")
```

